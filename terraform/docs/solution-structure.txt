# Terraform Solution Structure

## Overview
This document outlines the complete structure of the Contoso Terraform solution, built following Azure best practices and using Azure Verified Modules (AVM) where available.

## Directory Structure

```
terraform/
├── environments/
│   └── dev/
│       ├── main.tf                    # Terraform configuration and providers
│       ├── variables.tf               # All variable definitions with validation
│       ├── terraform.tfvars           # Environment-specific default values
│       ├── outputs.tf                 # Solution outputs and resource information
│       └── architectural-resources.tf # Central deployment file with all resources
├── modules/
│   ├── networking/
│   │   ├── hub-vnet/
│   │   │   ├── main.tf               # Hub VNet using AVM module
│   │   │   ├── variables.tf          # Hub VNet input variables
│   │   │   └── outputs.tf            # Hub VNet outputs
│   │   ├── spoke-vnet/
│   │   │   ├── main.tf               # Spoke VNet using AVM module
│   │   │   ├── variables.tf          # Spoke VNet input variables
│   │   │   └── outputs.tf            # Spoke VNet outputs
│   │   ├── vnet-peering/
│   │   │   ├── main.tf               # VNet peering configuration
│   │   │   ├── variables.tf          # Peering input variables
│   │   │   └── outputs.tf            # Peering outputs
│   │   ├── front-door/
│   │   │   ├── main.tf               # Azure Front Door with WAF and CDN
│   │   │   ├── variables.tf          # Front Door input variables
│   │   │   └── outputs.tf            # Front Door outputs
│   │   └── nsg/
│   │       ├── main.tf               # Network Security Groups using AVM
│   │       ├── variables.tf          # NSG input variables
│   │       └── outputs.tf            # NSG outputs
│   ├── compute/
│   │   ├── virtual-machines/
│   │   │   ├── main.tf               # VM module with Linux/Windows support
│   │   │   ├── variables.tf          # VM input variables
│   │   │   └── outputs.tf            # VM outputs
│   │   ├── app-service/
│   │   │   ├── main.tf               # App Service using AVM module
│   │   │   ├── variables.tf          # App Service input variables
│   │   │   └── outputs.tf            # App Service outputs
│   │   └── container-instances/
│   │       ├── main.tf               # Azure Container Instances
│   │       ├── variables.tf          # Container input variables
│   │       └── outputs.tf            # Container outputs
│   ├── data/
│   │   ├── storage-account/
│   │   │   ├── main.tf               # Storage Account using AVM module
│   │   │   ├── variables.tf          # Storage input variables
│   │   │   └── outputs.tf            # Storage outputs
│   │   └── sql-database/
│   │       ├── main.tf               # Azure SQL Database using AVM
│   │       ├── variables.tf          # SQL Database input variables
│   │       └── outputs.tf            # SQL Database outputs
│   ├── security/
│   │   └── key-vault/
│   │       ├── main.tf               # Azure Key Vault using AVM module
│   │       ├── variables.tf          # Key Vault input variables
│   │       └── outputs.tf            # Key Vault outputs
│   ├── monitoring/
│   │   ├── log-analytics/
│   │   │   ├── main.tf               # Log Analytics Workspace using AVM
│   │   │   ├── variables.tf          # Log Analytics input variables
│   │   │   └── outputs.tf            # Log Analytics outputs
│   │   └── application-insights/
│   │       ├── main.tf               # Application Insights configuration
│   │       ├── variables.tf          # App Insights input variables
│   │       └── outputs.tf            # App Insights outputs
│   └── backup/
│       └── recovery-services-vault/
│           ├── main.tf               # Recovery Services Vault and policies
│           ├── variables.tf          # Backup input variables
│           └── outputs.tf            # Backup outputs
├── shared/
│   └── common-resources/
└── docs/
    ├── architecture-diagrams/
    │   └── Contoso.jpg               # Original architecture diagram
    ├── solution-structure.txt        # This file
    └── solution-features.md          # Detailed feature documentation
```

## File Descriptions

### Environment Files (`environments/dev/`)

- **main.tf**: Contains Terraform configuration, provider settings, and backend configuration for state management
- **variables.tf**: Defines all input variables with descriptions, types, defaults, and validation rules
- **terraform.tfvars**: Contains environment-specific values for variables
- **outputs.tf**: Defines output values for resource information and connection details
- **architectural-resources.tf**: Central file containing all resource deployments with conditional logic

### Module Files (`modules/`)

Each module follows the standard Terraform module structure:
- **main.tf**: Resource definitions and module calls
- **variables.tf**: Input variable definitions
- **outputs.tf**: Output value definitions

### Module Categories

1. **Networking Modules**: Hub-spoke network architecture with VNet peering, NSGs, and Front Door
2. **Compute Modules**: Virtual machines, App Services, and Container Instances
3. **Data Modules**: Storage Accounts and SQL Database with backup policies
4. **Security Modules**: Key Vault for secrets and certificate management
5. **Monitoring Modules**: Log Analytics Workspace and Application Insights
6. **Backup Modules**: Recovery Services Vault with VM and file share backup policies

## Naming Conventions

Resources follow Azure best practices naming convention:
```
{resource-type}-{project}-{environment}-{location-short}-{serial}
```

Examples:
- Resource Group: `rg-contoso-dev-eus-001`
- Virtual Network: `vnet-contoso-dev-eus-001`
- Virtual Machine: `vm-web-dev-eus-001`
- Storage Account: `stcontosodeveus001` (alphanumeric only)

## Deployment Flow

1. **Resource Groups**: Four-tier structure (Hub, App, Data, Shared)
2. **Networking**: Hub and spoke VNets with subnets and NSGs
3. **VNet Peering**: Establish connectivity between hub and spokes
4. **Security Foundation**: Key Vault with network ACLs and access policies
5. **Compute Resources**: VMs, App Services, and Container Instances
6. **Data Layer**: Storage accounts and SQL Database with firewall rules
7. **Monitoring Infrastructure**: Log Analytics and Application Insights
8. **Backup Services**: Recovery Services Vault with automated policies
9. **Global Distribution**: Azure Front Door with CDN and WAF

## Conditional Deployment

All major resource categories can be toggled on/off using boolean variables:

### **Networking Resources**
- `deploy_hub_network` - Hub VNet with gateway subnet and bastion subnet
- `deploy_app_spoke` - Application tier spoke VNet with web and app subnets
- `deploy_data_spoke` - Data tier spoke VNet with database subnet
- `deploy_front_door` - Azure Front Door with CDN and WAF

### **Compute Resources**
- `deploy_web_vms` - Web tier virtual machines (configurable count)
- `deploy_app_vms` - Application tier virtual machines (configurable count)
- `deploy_app_service` - Azure App Service with Linux plans
- `deploy_containers` - Azure Container Instances

### **Data & Storage**
- `deploy_storage` - Storage accounts with multiple performance tiers
- `deploy_sql_database` - Azure SQL Database with server and firewall

### **Security & Management**
- `deploy_key_vault` - Azure Key Vault for secrets management
- `deploy_log_analytics` - Log Analytics workspace for centralized logging
- `deploy_app_insights` - Application Insights for application monitoring
- `deploy_backup_vault` - Recovery Services Vault with backup policies

### **Scaling Variables**
- `web_vm_count` / `app_vm_count` - Number of VMs per tier
- `container_cpu_cores` / `container_memory_gb` - Container resource allocation
- `sql_sku_name` - SQL Database performance tier (S0, S1, S2, etc.)

This modular approach allows for:
- **Development**: Deploy minimal resources for testing
- **Production**: Full enterprise-grade deployment with all services
- **Cost Optimization**: Enable only needed services per environment
- **Phased Rollouts**: Incrementally add services over time

## Azure Verified Modules (AVM) Integration

The solution extensively uses Azure Verified Modules for enterprise-grade, battle-tested implementations:

### **AVM Modules Used**
- `avm-res-network-virtualnetwork` - Virtual Networks with subnets
- `avm-res-network-networksecuritygroup` - Network Security Groups
- `avm-res-web-serverfarm` - App Service Plans
- `avm-res-web-site` - Web Applications
- `avm-res-storage-storageaccount` - Storage Accounts
- `avm-res-sql-server` - SQL Servers and Databases
- `avm-res-keyvault-vault` - Key Vault with access policies
- `avm-res-operationalinsights-workspace` - Log Analytics Workspaces

### **Custom Modules**
Where AVM modules are not available, custom modules follow AVM patterns:
- VNet Peering (awaiting official AVM module)
- Azure Front Door (comprehensive CDN and WAF configuration)
- Container Instances (multi-OS support with networking)
- Recovery Services Vault (backup policies and retention)

### **Benefits of AVM Integration**
- **Enterprise Ready**: Production-tested configurations
- **Security Hardened**: Built-in security best practices
- **Consistent Patterns**: Standardized variable naming and outputs
- **Automated Updates**: Benefit from Microsoft's ongoing improvements
- **Compliance**: Pre-configured for regulatory requirements

## File Organization Best Practices

### **Variable Management**
- **Validation Rules**: All critical variables include validation
- **Sensitive Variables**: Marked appropriately for secure handling
- **Default Values**: Sensible defaults for rapid deployment
- **Documentation**: Comprehensive descriptions for all variables

### **Output Structure**
- **Resource Information**: IDs, names, and connection strings
- **Network Details**: Subnet IDs, CIDR blocks, and peering status
- **Security Context**: Key Vault URIs and access policy assignments
- **Monitoring Endpoints**: Log Analytics and Application Insights keys